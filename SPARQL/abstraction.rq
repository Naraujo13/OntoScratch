PREFIX ctc: <http://www.semanticweb.org/nicol/ontologies/2020/4/CTConcepts/>
PREFIX scratch: <http://www.semanticweb.org/nicol/ontologies/scratch/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
# SELECT ?evaluation ?project ?abstraction
# ?has_level_1 ?has_level_2 ?has_level_3
# ?score
CONSTRUCT {
	?abstraction ctc:ConceptScore ?score
}
WHERE {
	?evaluation rdf:type ctc:CTEvaluation .
	?evaluation ctc:evaluates ?abstraction .
	?abstraction rdf:type ctc:Abstraction .

	?evaluation ctc:uses ?project .
	?project rdf:type scratch:Project .

	# # Rule 1
	OPTIONAL{
    ?project scratch:HasSprite ?level_1_sprite_1 .
    ?project scratch:HasSprite ?level_1_sprite_2 .

    ?project scratch:owns ?level_1_block_1 .
    ?level_1_block_1 scratch:Scripts ?level_1_sprite_3 .
    ?project scratch:owns ?level_1_block_2 .
    ?level_1_block_2 scratch:Scripts ?level_1_sprite_4 .


  }
	# Rule 2
	OPTIONAL{
    ?project scratch:owns ?level_2_block .
    ?level_2_block rdf:type <http://www.semanticweb.org/nicol/ontologies/scratch/Define()Block>
  }
	# Rule 3
	OPTIONAL{
    ?project scratch:owns ?level_3_block .
    { ?level_3_block rdf:type <http://www.semanticweb.org/nicol/ontologies/scratch/CreateCloneOf()Block> } UNION
    { ?level_3_block rdf:type <http://www.semanticweb.org/nicol/ontologies/scratch/DeleteThisCloneBlock> } UNION
    { ?level_3_block rdf:type <http://www.semanticweb.org/nicol/ontologies/scratch/WhenIStartAsACloneBlock> }
  }

    BIND(
      if(
        BOUND(?level_1_sprite_1) && BOUND(?level_1_sprite_2) &&
        BOUND(?level_1_block_1) && BOUND(?level_1_block_2),
        !sameterm(?level_1_sprite_1, ?level_1_sprite_2) &&
        !sameterm(?level_1_block_1, ?level_1_block_2),
        FALSE
      ) AS ?has_level_1
    )
	BIND(BOUND(?level_2_block) AS ?has_level_2)
	BIND(BOUND(?level_3_block) AS ?has_level_3)

	BIND(
		if(
			?has_level_3,
			3,
			if(
				?has_level_2,
				2,
				if(
					?has_level_1,
					1,
					0
				)
			)
		)
	AS ?score)
}
